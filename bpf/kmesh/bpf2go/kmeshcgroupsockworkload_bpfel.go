// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package bpf2go

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadKmeshCgroupSockWorkload returns the embedded CollectionSpec for KmeshCgroupSockWorkload.
func LoadKmeshCgroupSockWorkload() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshCgroupSockWorkloadBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshCgroupSockWorkload: %w", err)
	}

	return spec, err
}

// LoadKmeshCgroupSockWorkloadObjects loads KmeshCgroupSockWorkload and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KmeshCgroupSockWorkloadObjects
//     *KmeshCgroupSockWorkloadPrograms
//     *KmeshCgroupSockWorkloadMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshCgroupSockWorkloadObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshCgroupSockWorkload()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshCgroupSockWorkloadSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSockWorkloadSpecs struct {
	KmeshCgroupSockWorkloadProgramSpecs
	KmeshCgroupSockWorkloadMapSpecs
}

// KmeshCgroupSockWorkloadSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSockWorkloadProgramSpecs struct {
	CgroupConnect4Prog *ebpf.ProgramSpec `ebpf:"cgroup_connect4_prog"`
}

// KmeshCgroupSockWorkloadMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSockWorkloadMapSpecs struct {
	KmeshBackend  *ebpf.MapSpec `ebpf:"kmesh_backend"`
	KmeshEndpoint *ebpf.MapSpec `ebpf:"kmesh_endpoint"`
	KmeshFrontend *ebpf.MapSpec `ebpf:"kmesh_frontend"`
	KmeshService  *ebpf.MapSpec `ebpf:"kmesh_service"`
}

// KmeshCgroupSockWorkloadObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSockWorkloadObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSockWorkloadObjects struct {
	KmeshCgroupSockWorkloadPrograms
	KmeshCgroupSockWorkloadMaps
}

func (o *KmeshCgroupSockWorkloadObjects) Close() error {
	return _KmeshCgroupSockWorkloadClose(
		&o.KmeshCgroupSockWorkloadPrograms,
		&o.KmeshCgroupSockWorkloadMaps,
	)
}

// KmeshCgroupSockWorkloadMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSockWorkloadObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSockWorkloadMaps struct {
	KmeshBackend  *ebpf.Map `ebpf:"kmesh_backend"`
	KmeshEndpoint *ebpf.Map `ebpf:"kmesh_endpoint"`
	KmeshFrontend *ebpf.Map `ebpf:"kmesh_frontend"`
	KmeshService  *ebpf.Map `ebpf:"kmesh_service"`
}

func (m *KmeshCgroupSockWorkloadMaps) Close() error {
	return _KmeshCgroupSockWorkloadClose(
		m.KmeshBackend,
		m.KmeshEndpoint,
		m.KmeshFrontend,
		m.KmeshService,
	)
}

// KmeshCgroupSockWorkloadPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSockWorkloadObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSockWorkloadPrograms struct {
	CgroupConnect4Prog *ebpf.Program `ebpf:"cgroup_connect4_prog"`
}

func (p *KmeshCgroupSockWorkloadPrograms) Close() error {
	return _KmeshCgroupSockWorkloadClose(
		p.CgroupConnect4Prog,
	)
}

func _KmeshCgroupSockWorkloadClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed kmeshcgroupsockworkload_bpfel.o
var _KmeshCgroupSockWorkloadBytes []byte
